//Task1: to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
db.restaurants.find({},{_id: ture, name: true, cuisine:ture, borough: true}).pretty()

//Task2: to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
db.restaurants.find({},{_id: false, name: true, cuisine:ture, borough: true}).pretty()

//Task3: to display the fields restaurant_id, name, borough and zipcode, but exclude the field _id for all the documents in the collection restaurant.
db.restaurants.find({},{_id: false, name: true, cuisine:ture, borough: true, "address.zipcode": true}).pretty()

//Task4: to display all the restaurant which is in the borough Bronx.
db.restaurants.find({borough: "Bronx"},{_id: false, name: true}).pretty()

//Task5: to display the first 5 restaurant which is in the borough Bronx.
db.restaurants.find({borough: "Bronx"},{_id: false, name: true}).limit(5).pretty()

//Task6: to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
db.restaurants.find({borough: "Bronx"},{_id: false, name: true}).limit(5).skip(5).pretty()

//Task7: to find the restaurants who achieved a score more than 90.
db.restaurants.find({"grades.score": {$gt : 90 }},{_id: false, name: true}).pretty()

//Task8: to find the restaurants that achieved a score, more than 80 but less than 100.
db.restaurants.find({"grades.score": {$gt : 80, $lt: 100 }},{_id: false, name: true}).pretty()

//Task9: to find the restaurants which locates in latitude value less than -95.754168.
db.restaurants.find({"address.coord.0": { $lt: -95.754168 }},{_id: false, name: true}).pretty()

//Task10: to find the restaurants that does not prepare any cuisine of 'American' and their grade score more than 70 and lattitude less than -65.754168.
db.restaurants.find({"grades.score": { $gt: 70 }, "address.coord.0": { $lt : -65.754168}, "cuisine": { $ne: 'American'}},{_id: false, name: true}).pretty()

//Task11: to find the restaurants which does not prepare any cuisine of 'American' and achieved a score more than 70 and not located in the longitude less than -65.754168.
db.restaurants.find({"grades.score": {$ne: {$gt: 70 }}, "address.coord.0": { $lt : -65.754168}, "cuisine": { $ne: 'American'}},{_id: false, name: true}).pretty()

//Task12: to find the restaurants which does not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
db.restaurants.find({"grades.grade": 'A', "cuisine": { $ne: 'American'}, 'borough': {$ne: 'Brooklyn'}},{_id: false, name: true, cusine: true}).sort({'cuisine': -1}).pretty()

//Task13: to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'Wil' as first three letters for its name.
db.restaurants.find({"name": /^Wil/},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task14: to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'ces' as last three letters for its name.
db.restaurants.find({"name": /ces$/},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task15: to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'Reg' as three letters somewhere in its name.
db.restaurants.find({"name": /Reg/},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task16: to find the restaurants which belongs to the borough Bronx and prepared either American or Chinese dish.
db.restaurants.find({$and: [{"borough": "Bronx"},{$or: [{"cuisine": "American"},{"cuisine": "Chinese"}]}]},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task17: to find the restaurant Id, name, borough and cuisine for those restaurants which belongs to the borough Staten Island or Queens or Bronxor Brooklyn.
db.restaurants.find({$or: [{"borough": "Staten Island"},{"borough": "Queens"},{"borough": "Bronxor Brooklyn"}]},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task18: to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
db.restaurants.find({$ne: {$or: [{"borough": {$ne: "Staten Island"}},{"borough": {$ne: "Queens"}},{"borough": {$ne: "Bronxor Brooklyn"}}]}},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task19: to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
db.restaurants.find({"grades.score": {$not: {$gt: 10}}},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task20: to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.
db.restaurants.find({$or: [{"cuisine": {$nint: ['American', 'Chinese']}}, {"name": /^Wil/}]},{_id: true, name: true, borough: true, cuisine: true}).pretty()

//Task21: to find the restaurant Id, name and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..


to find the restaurant Id, name and grades for those restaurants where 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".


to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..


to arrange the name of the restaurants in ascending order along with all the columns.


to arrange the name of the restaurants in descending along with all the columns.


to arranged the name of the cuisine in ascending order and for those same cuisine borough should be in descending order.


to know whether all the addresses contains the street or not.


which will select all documents in the restaurants collection where the coord field value is Double.


which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.


to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.


to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contains 'Mad' as first three letters of its name.
